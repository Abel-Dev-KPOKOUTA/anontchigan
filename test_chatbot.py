#!/usr/bin/env python
"""
TEST COMPLET DU SYST√àME DE M√âMOIRE CONTEXTUELLE
Script de test complet pour v√©rifier le syst√®me de m√©moire contextuelle du chatbot ANONTCHIGAN
"""
import os
import sys
import time
import uuid
import django
from datetime import datetime

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'anontchigan.settings')
django.setup()

from chatbot.services.rag_service import ChatbotService, Config

class TestLogger:
    """Logger personnalis√© pour les tests"""
    
    def __init__(self):
        self.start_time = datetime.now()
        self.test_count = 0
        self.passed_count = 0
        self.failed_count = 0
    
    def print_separator(self, title=None, length=70):
        """Affiche un s√©parateur avec titre optionnel"""
        if title:
            print(f"\n{title}")
            print("=" * length)
        else:
            print("\n" + "=" * length)
    
    def print_step(self, message):
        """Affiche une √©tape de test"""
        print(f"\nüìã {message}")
        print("-" * 50)
    
    def print_success(self, message):
        """Affiche un succ√®s"""
        print(f"‚úÖ {message}")
        self.passed_count += 1
    
    def print_warning(self, message):
        """Affiche un avertissement"""
        print(f"‚ö†Ô∏è  {message}")
    
    def print_error(self, message):
        """Affiche une erreur"""
        print(f"‚ùå {message}")
        self.failed_count += 1
    
    def print_info(self, message):
        """Affiche une information"""
        print(f"‚ÑπÔ∏è  {message}")
    
    def print_result(self, test_name, success, details=None):
        """Affiche le r√©sultat d'un test"""
        self.test_count += 1
        if success:
            self.print_success(f"{test_name}")
        else:
            self.print_error(f"{test_name}")
        
        if details:
            print(f"   üìù {details}")
    
    def get_summary(self):
        """Retourne le r√©sum√© des tests"""
        duration = datetime.now() - self.start_time
        return {
            'total_tests': self.test_count,
            'passed': self.passed_count,
            'failed': self.failed_count,
            'success_rate': (self.passed_count / self.test_count * 100) if self.test_count > 0 else 0,
            'duration': duration
        }


class ComprehensiveContextMemoryTest:
    """Classe principale de test du syst√®me de m√©moire contextuelle"""
    
    def __init__(self):
        self.logger = TestLogger()
        self.service = None
        self.setup_completed = False
    
    def setup(self):
        """Initialise l'environnement de test"""
        self.logger.print_separator("üß™ INITIALISATION DU SYST√àME DE TEST")
        
        try:
            self.logger.print_step("Chargement du service chatbot...")
            self.service = ChatbotService()
            
            # V√©rifier l'√©tat du service
            health_status = self.service.get_health_status()
            self.logger.print_info(f"√âtat du service: {health_status}")
            
            if not health_status['groq_available']:
                self.logger.print_warning("Service Groq non disponible - certains tests utiliseront le fallback")
            
            self.logger.print_success("Service chatbot initialis√© avec succ√®s")
            self.setup_completed = True
            
        except Exception as e:
            self.logger.print_error(f"√âchec de l'initialisation: {e}")
            raise
    
    def test_basic_conversation_flow(self):
        """Test le flux de conversation basique avec contexte"""
        self.logger.print_separator("üß™ TEST 1: FLUX DE CONVERSATION BASIQUE")
        
        user_id = f"test_basic_{uuid.uuid4().hex[:8]}"
        success = True
        details = []
        
        try:
            # Test 1.1: Premi√®re question
            self.logger.print_step("Test 1.1 - Premi√®re question")
            question1 = "Comment faire un auto-examen du sein ?"
            response1 = self.service.process_question(question1, user_id)
            
            history = self.service.conversation_manager.get_history(user_id)
            if len(history) == 2:
                self.logger.print_success("Historique initial cr√©√© correctement")
            else:
                self.logger.print_error(f"Historique incorrect: {len(history)} messages au lieu de 2")
                success = False
                details.append("√âchec cr√©ation historique")
            
            # Test 1.2: Question de suivi directe
            self.logger.print_step("Test 1.2 - Question de suivi directe")
            question2 = "Pourquoi c'est important ?"
            is_followup = self.service._is_followup_question(question2, history)
            
            if is_followup:
                self.logger.print_success("D√©tection de suivi correcte")
            else:
                self.logger.print_error("√âchec d√©tection de suivi")
                success = False
                details.append("D√©tection suivi √©chou√©e")
            
            response2 = self.service.process_question(question2, user_id)
            history = self.service.conversation_manager.get_history(user_id)
            
            if len(history) == 4:
                self.logger.print_success("Historique mis √† jour correctement")
            else:
                self.logger.print_error(f"Historique incorrect apr√®s suivi: {len(history)} messages")
                success = False
                details.append("Mise √† jour historique √©chou√©e")
            
            # Test 1.3: Question avec r√©f√©rence contextuelle
            self.logger.print_step("Test 1.3 - R√©f√©rence contextuelle")
            question3 = "Et pour les jeunes filles, c'est pareil ?"
            response3 = self.service.process_question(question3, user_id)
            
            # V√©rifier que la r√©ponse fait r√©f√©rence au contexte
            answer_lower = response3['answer'].lower()
            context_indicators = ['auto-examen', 'sein', 'jeune', 'fille', 'adolescente']
            context_used = any(indicator in answer_lower for indicator in context_indicators)
            
            if context_used:
                self.logger.print_success("Contexte utilis√© dans la r√©ponse")
            else:
                self.logger.print_warning("Contexte potentiellement sous-utilis√©")
                details.append("Contexte sous-utilis√©")
            
            self.logger.print_result("Flux de conversation basique", success, "; ".join(details) if details else None)
            
        except Exception as e:
            self.logger.print_error(f"Erreur pendant le test: {e}")
            success = False
            self.logger.print_result("Flux de conversation basique", False, f"Erreur: {e}")
        
        return success
    
    def test_followup_detection_accuracy(self):
        """Test la pr√©cision de la d√©tection des questions de suivi"""
        self.logger.print_separator("üß™ TEST 2: PR√âCISION DE D√âTECTION DES SUIVIS")
        
        try:
            # Historique simul√©
            fake_history = [
                {"role": "user", "content": "Comment faire l'auto-examen du sein ?"},
                {"role": "assistant", "content": "Voici comment proc√©der..."}
            ]
            
            test_cases = [
                # (question, attendu, raison)
                ("Pourquoi ?", True, "Question courte + mot-cl√©"),
                ("Et √ßa ?", True, "Question tr√®s courte"),
                ("Comment ?", True, "Question courte + mot-cl√©"),
                ("Explique mieux", True, "Mot-cl√© 'explique'"),
                ("Tu as dit quoi avant ?", True, "R√©f√©rence au pass√©"),
                ("C'est quoi les sympt√¥mes ?", False, "Question ind√©pendante"),
                ("Il faut le faire quand ?", True, "Pronom + contexte"),
                ("Quels sont les facteurs de risque du cancer ?", False, "Nouveau sujet"),
                ("", False, "Question vide"),
                ("   ", False, "Espaces seulement"),
            ]
            
            correct_detections = 0
            total_cases = len(test_cases)
            details = []
            
            for question, expected, reason in test_cases:
                result = self.service._is_followup_question(question, fake_history)
                status = result == expected
                
                if status:
                    correct_detections += 1
                    self.logger.print_success(f"'{question}' ‚Üí {result} ({reason})")
                else:
                    self.logger.print_error(f"'{question}' ‚Üí Attendu: {expected}, Obtenu: {result}")
                    details.append(f"'{question}': attendu {expected}, obtenu {result}")
            
            accuracy = correct_detections / total_cases * 100
            success = accuracy >= 80  # Seuil de 80% de pr√©cision
            
            if success:
                self.logger.print_success(f"Pr√©cision: {accuracy:.1f}% ({correct_detections}/{total_cases})")
            else:
                self.logger.print_error(f"Pr√©cision: {accuracy:.1f}% ({correct_detections}/{total_cases})")
            
            self.logger.print_result(
                "D√©tection des questions de suivi", 
                success, 
                f"Pr√©cision: {accuracy:.1f}%" + ("; " + "; ".join(details) if details else "")
            )
            
            return success
            
        except Exception as e:
            self.logger.print_error(f"Erreur pendant le test: {e}")
            self.logger.print_result("D√©tection des questions de suivi", False, f"Erreur: {e}")
            return False
    
    def test_history_management(self):
        """Test la gestion de l'historique (limites, conservation)"""
        self.logger.print_separator("üß™ TEST 3: GESTION DE L'HISTORIQUE")
        
        user_id = f"test_history_{uuid.uuid4().hex[:8]}"
        success = True
        details = []
        
        try:
            # Test 3.1: Ajout de messages jusqu'√† la limite
            self.logger.print_step("Test 3.1 - Limite d'historique")
            
            # Ajouter plus de messages que la limite
            excess_messages = Config.MAX_HISTORY_LENGTH * 2 + 5
            
            for i in range(excess_messages):
                self.service.conversation_manager.add_message(user_id, "user", f"Message utilisateur {i}")
                self.service.conversation_manager.add_message(user_id, "assistant", f"R√©ponse assistant {i}")
            
            history = self.service.conversation_manager.get_history(user_id)
            max_expected = Config.MAX_HISTORY_LENGTH * 2
            
            if len(history) <= max_expected:
                self.logger.print_success(f"Limite respect√©e: {len(history)}/{max_expected} messages")
            else:
                self.logger.print_error(f"Limite d√©pass√©e: {len(history)}/{max_expected} messages")
                success = False
                details.append("Limite historique d√©pass√©e")
            
            # Test 3.2: Conservation des messages r√©cents
            self.logger.print_step("Test 3.2 - Conservation des messages r√©cents")
            
            if history and "R√©ponse assistant" in history[-1]['content']:
                self.logger.print_success("Messages r√©cents conserv√©s")
            else:
                self.logger.print_error("Messages r√©cents non conserv√©s")
                success = False
                details.append("Conservation messages √©chou√©e")
            
            # Test 3.3: Isolation des sessions
            self.logger.print_step("Test 3.3 - Isolation des sessions utilisateur")
            
            other_user_id = f"other_user_{uuid.uuid4().hex[:8]}"
            self.service.conversation_manager.add_message(other_user_id, "user", "Question autre utilisateur")
            
            history_other = self.service.conversation_manager.get_history(other_user_id)
            history_original = self.service.conversation_manager.get_history(user_id)
            
            if len(history_other) == 1 and len(history_original) > 1:
                self.logger.print_success("Sessions utilisateur isol√©es")
            else:
                self.logger.print_error("Probl√®me d'isolation des sessions")
                success = False
                details.append("Isolation sessions √©chou√©e")
            
            self.logger.print_result("Gestion de l'historique", success, "; ".join(details) if details else None)
            
        except Exception as e:
            self.logger.print_error(f"Erreur pendant le test: {e}")
            success = False
            self.logger.print_result("Gestion de l'historique", False, f"Erreur: {e}")
        
        return success
    
    def test_contextual_understanding(self):
        """Test la compr√©hension contextuelle avanc√©e"""
        self.logger.print_separator("üß™ TEST 4: COMPR√âHENSION CONTEXTUELLE")
        
        user_id = f"test_context_{uuid.uuid4().hex[:8]}"
        success = True
        details = []
        
        try:
            # Test 4.1: Conversation coh√©rente sur un sujet
            self.logger.print_step("Test 4.1 - Coh√©rence th√©matique")
            
            questions = [
                "Qu'est-ce que le cancer du sein ?",
                "Quels en sont les sympt√¥mes principaux ?", 
                "Comment les d√©tecter pr√©cocement ?",
                "√Ä partir de quel √¢ge faut-il √™tre vigilant ?"
            ]
            
            responses = []
            for question in questions:
                response = self.service.process_question(question, user_id)
                responses.append(response)
            
            # V√©rifier que les r√©ponses sont coh√©rentes
            breast_cancer_terms = ['sein', 'cancer', 'mammaire', 'tumeur']
            thematic_coherence = all(
                any(term in response['answer'].lower() for term in breast_cancer_terms)
                for response in responses
            )
            
            if thematic_coherence:
                self.logger.print_success("Coh√©rence th√©matique maintenue")
            else:
                self.logger.print_warning("Coh√©rence th√©matique partielle")
                details.append("Coh√©rence th√©matique partielle")
            
            # Test 4.2: R√©f√©rences crois√©es
            self.logger.print_step("Test 4.2 - R√©f√©rences crois√©es")
            
            followup_question = "Et pour les hommes, ces sympt√¥mes sont-ils les m√™mes ?"
            followup_response = self.service.process_question(followup_question, user_id)
            
            # V√©rifier que la r√©ponse fait r√©f√©rence au contexte des sympt√¥mes
            answer_lower = followup_response['answer'].lower()
            context_references = ['sympt√¥me', 'homme', 'masculin', 'cancer']
            context_used = sum(1 for ref in context_references if ref in answer_lower)
            
            if context_used >= 2:
                self.logger.print_success("R√©f√©rences contextuelles d√©tect√©es")
            else:
                self.logger.print_warning("Peu de r√©f√©rences contextuelles")
                details.append("R√©f√©rences contextuelles limit√©es")
            
            self.logger.print_result("Compr√©hension contextuelle", success, "; ".join(details) if details else None)
            
        except Exception as e:
            self.logger.print_error(f"Erreur pendant le test: {e}")
            success = False
            self.logger.print_result("Compr√©hension contextuelle", False, f"Erreur: {e}")
        
        return success
    
    def test_performance_and_scalability(self):
        """Test les performances et l'√©volutivit√© du syst√®me"""
        self.logger.print_separator("üß™ TEST 5: PERFORMANCE ET √âVOLUTIVIT√â")
        
        success = True
        details = []
        
        try:
            # Test 5.1: Performance avec multiples utilisateurs
            self.logger.print_step("Test 5.1 - Performance multi-utilisateurs")
            
            start_time = time.time()
            user_count = 10
            questions_per_user = 5
            
            test_questions = [
                "Bonjour",
                "Qu'est-ce que le cancer du sein ?",
                "Comment faire l'auto-examen ?", 
                "Quels sont les facteurs de risque ?",
                "Merci pour les informations"
            ]
            
            for user_index in range(user_count):
                user_id = f"perf_user_{user_index}"
                for question in test_questions[:questions_per_user]:
                    self.service.process_question(question, user_id)
            
            end_time = time.time()
            total_time = end_time - start_time
            total_operations = user_count * questions_per_user
            
            performance = total_operations / total_time if total_time > 0 else 0
            
            self.logger.print_info(f"Temps total: {total_time:.2f}s")
            self.logger.print_info(f"Op√©rations: {total_operations}")
            self.logger.print_info(f"Performance: {performance:.2f} op√©rations/seconde")
            
            if performance >= 1.0:  # Au moins 1 op√©ration par seconde
                self.logger.print_success("Performance acceptable")
            else:
                self.logger.print_warning("Performance faible")
                details.append(f"Performance: {performance:.2f} ops/sec")
            
            # Test 5.2: Utilisation m√©moire
            self.logger.print_step("Test 5.2 - Utilisation m√©moire")
            
            active_conversations = len(self.service.conversation_manager.conversations)
            total_messages = sum(
                len(history) for history in self.service.conversation_manager.conversations.values()
            )
            
            self.logger.print_info(f"Conversations actives: {active_conversations}")
            self.logger.print_info(f"Messages totaux: {total_messages}")
            
            if active_conversations == user_count:
                self.logger.print_success("Gestion m√©moire correcte")
            else:
                self.logger.print_error("Probl√®me de gestion m√©moire")
                success = False
                details.append("Gestion m√©moire √©chou√©e")
            
            self.logger.print_result("Performance et √©volutivit√©", success, "; ".join(details) if details else None)
            
        except Exception as e:
            self.logger.print_error(f"Erreur pendant le test: {e}")
            success = False
            self.logger.print_result("Performance et √©volutivit√©", False, f"Erreur: {e}")
        
        return success
    
    def test_error_handling_and_resilience(self):
        """Test la gestion des erreurs et la r√©silience du syst√®me"""
        self.logger.print_separator("üß™ TEST 6: GESTION DES ERREURS ET R√âSILIENCE")
        
        success = True
        details = []
        
        try:
            # Test 6.1: Cas limites et entr√©es invalides
            self.logger.print_step("Test 6.1 - Cas limites")
            
            edge_cases = [
                ("", "Question vide"),
                ("   ", "Espaces seulement"),
                ("a", "Tr√®s court"),
                ("x" * 1000, "Tr√®s long"),
                ("¬ø¬ø¬ø???", "Caract√®res sp√©ciaux"),
                ("123456789", "Chiffres seulement"),
            ]
            
            user_id = f"resilience_{uuid.uuid4().hex[:8]}"
            handled_correctly = 0
            
            for question, description in edge_cases:
                try:
                    response = self.service.process_question(question, user_id)
                    if response and response.get('answer'):
                        handled_correctly += 1
                        self.logger.print_success(f"'{description}' ‚Üí G√©r√©")
                    else:
                        self.logger.print_warning(f"'{description}' ‚Üí R√©ponse vide")
                except Exception as e:
                    self.logger.print_error(f"'{description}' ‚Üí Erreur: {e}")
            
            resilience_rate = handled_correctly / len(edge_cases) * 100
            
            if resilience_rate >= 80:
                self.logger.print_success(f"R√©silience: {resilience_rate:.1f}%")
            else:
                self.logger.print_warning(f"R√©silience: {resilience_rate:.1f}%")
                details.append(f"R√©silience: {resilience_rate:.1f}%")
            
            # Test 6.2: R√©cup√©ration apr√®s erreur
            self.logger.print_step("Test 6.2 - R√©cup√©ration apr√®s erreur")
            
            # Tester une conversation normale apr√®s les cas limites
            normal_question = "Pouvez-vous me parler de la pr√©vention du cancer du sein ?"
            normal_response = self.service.process_question(normal_question, user_id)
            
            if normal_response and normal_response.get('answer'):
                self.logger.print_success("R√©cup√©ration apr√®s erreur r√©ussie")
            else:
                self.logger.print_error("√âchec de r√©cup√©ration apr√®s erreur")
                success = False
                details.append("R√©cup√©ration √©chou√©e")
            
            self.logger.print_result("Gestion des erreurs et r√©silience", success, "; ".join(details) if details else None)
            
        except Exception as e:
            self.logger.print_error(f"Erreur pendant le test: {e}")
            success = False
            self.logger.print_result("Gestion des erreurs et r√©silience", False, f"Erreur: {e}")
        
        return success
    
    def run_all_tests(self):
        """Ex√©cute tous les tests et retourne un r√©sum√©"""
        if not self.setup_completed:
            self.logger.print_error("Setup non effectu√©. Appelez setup() d'abord.")
            return False
        
        self.logger.print_separator("üéØ D√âMARRAGE DE LA SUITE DE TESTS COMPL√àTE", 80)
        
        tests = [
            ("Flux de conversation basique", self.test_basic_conversation_flow),
            ("D√©tection des questions de suivi", self.test_followup_detection_accuracy),
            ("Gestion de l'historique", self.test_history_management),
            ("Compr√©hension contextuelle", self.test_contextual_understanding),
            ("Performance et √©volutivit√©", self.test_performance_and_scalability),
            ("Gestion des erreurs et r√©silience", self.test_error_handling_and_resilience),
        ]
        
        results = []
        
        for test_name, test_func in tests:
            try:
                result = test_func()
                results.append((test_name, result))
            except Exception as e:
                self.logger.print_error(f"Test '{test_name}' a √©chou√© avec exception: {e}")
                results.append((test_name, False))
        
        # Affichage du r√©sum√©
        self.logger.print_separator("üìä RAPPORT FINAL DES TESTS", 80)
        
        for test_name, result in results:
            status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
            print(f"  {status}: {test_name}")
        
        summary = self.logger.get_summary()
        
        print(f"\nüìà STATISTIQUES:")
        print(f"  Total des tests: {summary['total_tests']}")
        print(f"  Tests r√©ussis: {summary['passed']}")
        print(f"  Tests √©chou√©s: {summary['failed']}")
        print(f"  Taux de r√©ussite: {summary['success_rate']:.1f}%")
        print(f"  Dur√©e totale: {summary['duration']}")
        
        # Recommandations
        self.logger.print_separator("üí° RECOMMANDATIONS", 80)
        
        if summary['success_rate'] == 100:
            print("üéâ EXCELLENT! Le syst√®me est pr√™t pour la production.")
            print("   Tous les tests ont √©t√© r√©ussis avec succ√®s.")
        elif summary['success_rate'] >= 80:
            print("‚ö†Ô∏è  BON! Le syst√®me est fonctionnel mais peut √™tre am√©lior√©.")
            print("   Quelques ajustements mineurs sont recommand√©s.")
        elif summary['success_rate'] >= 60:
            print("üîß SATISFAISANT! Le syst√®me fonctionne mais n√©cessite des am√©liorations.")
            print("   Certains aspects critiques doivent √™tre revus.")
        else:
            print("üö® ATTENTION! Le syst√®me pr√©sente des probl√®mes importants.")
            print("   Une r√©vision compl√®te est n√©cessaire avant le d√©ploiement.")
        
        return summary['success_rate'] >= 80


def main():
    """Point d'entr√©e principal du script de test"""
    
    tester = ComprehensiveContextMemoryTest()
    
    try:
        # Initialisation
        tester.setup()
        
        # Ex√©cution des tests
        overall_success = tester.run_all_tests()
        
        # Code de sortie
        sys.exit(0 if overall_success else 1)
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Tests interrompus par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• ERREUR CRITIQUE: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()